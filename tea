#!/usr/bin/env bash

: "${FZ:=fzy}"
: "${DB:="${XDG_DATA_HOME:-$HOME/.local/share}/tea.db"}"

function die {
    echo "$@"
    exit 1
}

function escape_sqlite {
    sed "s/'/''/g" <<< "$1"
}

function escape_or_null {
    if [ -n "$1" ]; then
        echo "'$(escape_sqlite "$1")'"
    else
        echo NULL
    fi
}

function _try_create_tempfile {
    if tmpfile=$(mktemp -q /tmp/teanotes.XXXXX); then
        echo "$tmpfile"
    else
        exit 1
    fi
}

function new_tea {
    read -r -p "Name: " name
    read -r -p "Amount: " amount
    read -r -p "URL: " url
    read -r -p "Type: " typ
    read -r -e -i "$(date +%Y)" -p "Year: " year

    [ -z "$name" ] && die "Please supply a name"
    name="'$(escape_sqlite "$name")'"

    amount="$(escape_or_null "$amount")"
    url="$(escape_or_null "$url")"
    typ="$(escape_or_null "$typ")"
    year="$(escape_or_null "$year")"
    uid="$(uuidgen -t)"

    sqlite3 "$DB" << SQL
insert into teas (name, year, amount, type, url, uid, date)
values ($name, $year, $amount, $typ, $url, '$uid', date('now'));
SQL
    
}

function _drink_tea {
    tea=$1
    uid="$(uuidgen -t)"
    read -r -p "Amount: " amount

    echo "New entry: $uid"

    sqlite3 "$DB" << SQL
insert into log (tea, amount, date, notes, uid)
values ('$(escape_sqlite "$tea")', $(escape_or_null "$amount"), date('now'), NULL, '$uid');
SQL
    
    [ -z "$EDITOR" ] && die "NO \$EDITOR set."
    tmpfile=$(_try_create_tempfile) || die "$0: Couldn't create tempfile"
    
    $EDITOR "$tmpfile"
    notes="$(cat "$tmpfile")"
    sqlite3 "$DB" << SQL
update log
set notes = '$(escape_sqlite "$notes")'
where uid = '$uid';
SQL

}

function drink_tea_fzy {
    tea="$(list_teas not-done)"
    [ -z "$tea" ] && exit 0
    _drink_tea "$tea"
}

function list_teas {
    mode="$1"
    : "${mode:="not-done"}"
    if [ "$mode" = "all" ]; then
	sqlite3 "$DB" "select name from teas" | $FZ
    elif [ "$mode" = "not-done" ]; then
	sqlite3 "$DB" \
	"select name from teas
	 where uid in 
	    ( select uid from teas
	      except
	      select tea_uid from done
	    )" | $FZ
    else
	exit 1
    fi
}

function finish_tea {
    tea="$(list_teas not-done)"
    tea="$(escape_sqlite "$tea")"
    [ -z "$tea" ] && exit 0
    tea_uid=$(sqlite3 "$DB" <<SQL
	-- a bit redundant with list_teas but what can you do...
	-- select the uid from amongst the teas named $tea which
	-- are not yet done
	select uid from teas
	where name = '$tea' and uid in 
	( select uid from teas
	  except
	  select tea_uid from done
	)
	limit 1
SQL
)
    tea_uid="$(escape_sqlite "$tea_uid")"
    done_uid="$(uuidgen -t)"
    done_uid="$(escape_sqlite "$done_uid")"
    sqlite3 "$DB" "insert into done (tea_uid, done_uid, date) values ('$tea_uid', '$done_uid', date('now'))"
}

function edit_notes {
    uid="$1"
    [ -z "$EDITOR" ] && die "NO \$EDITOR set."
    if [ -z "$uid" ]; then
        echo "No uid given; using latest entry"
        uid="$(sqlite3 "$DB" 'select uid from log order by date desc limit 1')"
    else
        uid="$(sqlite3 "$DB" "select uid from log where uid like '$(escape_sqlite "$uid")%'")"
        [ -z "$uid" ] && die "Couldn't find a log entry with that uid."
    fi
    
    tmpfile=$(_try_create_tempfile) || die "$0: Couldn't create tempfile"
    
    sqlite3 "$DB" "select notes from log where uid = '$(escape_sqlite "$uid")'" > "$tmpfile"
    $EDITOR "$tmpfile"
    notes="$(cat "$tmpfile")"
    sqlite3 "$DB" << SQL
update log
set notes = '$(escape_sqlite "$notes")'
where uid = '$uid';
SQL

}

function quick_log {
    sqlite3 "$DB" "select tea, amount, date, uid from log order by date desc limit 10"
}

function info_tea {
	tea="$(list_teas all)"
	tea="$(escape_sqlite "$tea")"
	[ -z "$tea" ] && exit 0
	total="$(sqlite3 "$DB" "select sum(amount) from teas where name = '$tea'")"
	drank="$(sqlite3 "$DB" "select sum(amount) from log where tea = '$tea'")"

    if [ -z "$drank" ]; then
        echo "Of ${total}g bought you drank nothing."
    else
        left="$(echo - | awk "{print $total - $drank}")"
        echo "Of ${total}g bought you drank ${drank}g. ${left}g left."

        avg_session_amnt="$(sqlite3 "$DB" "select round(avg(amount), 2) from log where tea = '$tea'")"
        echo "You use an average of ${avg_session_amnt}g per session."
        echo "Last few sessions:"
        sqlite3 "$DB" "select uid, date, amount from log where tea = '$tea' order by date desc limit 10" \
            | tac \
            | while IFS='|' read -r uid date amount; do
                echo "$amount on $date - $uid"
            done
    fi
}

function info_global {
    r=$(sqlite3 "$DB" << SQL 
select
    type_bought.type
  , round(type_bought.amnt, 2)
  , round(type_drank.amnt, 2)
  , round(type_bought.amnt - type_drank.amnt, 2)
from
(
    select
          type
        , sum(amount) as amnt
    from teas
    group by type
) as type_bought
join
(
    select
        sum(amount) as amnt
      , type from
        -- since the log joins onto tea name and not tea uid
        -- we have to distinct/indirect this query to not double count
        -- log entries where the tea was bought twice or more
    (
        select distinct
            name
          , log.amount
          , type
          , log.uid
          from teas
          join log on teas.name = log.tea
    ) group by type
) as type_drank
on type_bought.type = type_drank.type
order by 2 desc;
SQL
)

    while IFS='|' read -r ty amount_bought amount_drunk amount_left; do
        echo "Of ${amount_bought}g of $ty tea you drank ${amount_drunk}g. ${amount_left}g left."
    done <<< "$r"
}


function _client_sync_send_ids {
    echo remote-have-tea
    sqlite3 -readonly -quote "$DB" 'select uid from teas'
    echo remote-have-log
    sqlite3 -readonly -quote "$DB" 'select uid from log'
    echo remote-have-done
    sqlite3 -readonly -quote "$DB" 'select done_uid from done'
    echo "done"
}

function _client_sync_send_missing {
    local state=""
    local tea_ids=""
    local log_ids=""
    local done_ids=""
    local sql=""

    while read -r line; do
	case "$line" in
	    server-want-tea)
		state="server-want-tea"
	    ;;
	    server-want-log)
		state="server-want-log"
	    ;;
	    server-want-done)
		state="server-want-done"
	    ;;
	    server-begin-sql)
		state="server-begin-sql"
	    ;;
	    done)
		break
	    ;;
	    *)
		case "$state" in
		    server-want-tea)
			if [ -z "$tea_ids" ]; then
			    tea_ids="$line"
			else
			    tea_ids="$line,$tea_ids"
			fi
		    ;;

		    server-want-log)
			if [ -z "$log_ids" ]; then
			    log_ids="$line"
			else
			    log_ids="$line,$log_ids"
			fi
		    ;;
		    server-want-done)
			if [ -z "$done_ids" ]; then
			    done_ids="$line"
			else
			    done_ids="$line,$done_ids"
			fi
		    ;;
		    server-begin-sql)
			sql="$sql;$line"
		    ;;
		esac
	    ;;
	esac
    done

    echo client-begin-sql
    sqlite3 -readonly "$DB" <<SQL
.mode insert teas
select * from teas where uid in ($tea_ids);
.mode insert log
select * from log where uid in ($log_ids);
.mode insert done
select * from done where done_uid in ($done_ids);
SQL
    echo "done"
    
    if [ ! -z "$sql" ]; then
	sql="BEGIN TRANSACTION; $sql; END TRANSACTION;"
	sqlite3 "$DB" "$sql"
    fi

}

function _server_sync_send_missing {
    local tea_ids=""
    local log_ids=""
    local done_ids=""
    local state=""

    while read -r line; do
	case "$line" in
	    remote-have-tea)
		state="remote-have-tea"
	    ;;
	    remote-have-log)
		state="remote-have-log"
	    ;;
	    remote-have-done)
		state="remote-have-done"
	    ;;
	    done)
		break
	    ;;
	    *)
		case "$state" in
		    remote-have-tea)
			if [ -z "$tea_ids" ]; then
			    tea_ids="($line)"
			else
			    tea_ids="$tea_ids,($line)"
			fi
		    ;;
		    remote-have-log)
			if [ -z "$log_ids" ]; then
			    log_ids="($line)"
			else
			    log_ids="$log_ids,($line)"
			fi
		    ;;
		    remote-have-done)
			if [ -z "$done_ids" ]; then
			    done_ids="($line)"
			else
			    done_ids="$done_ids,($line)"
			fi
		    ;;
		esac
	    ;;
	esac
    done

    if [ ! -z "$tea_ids" ]; then
	echo server-begin-sql
	sqlite3 -readonly "$DB" <<SQL
.mode insert teas
select *
from teas
where uid in (
    select uid
    from teas
    except values $tea_ids
);
SQL

	echo server-want-tea
	sqlite3 -readonly -quote "$DB" <<SQL
	    select uid from (
		select 0 as uid
		union values $tea_ids
	    )
	    except select uid
	    from teas
	    limit -1
	    offset 1 -- to drop the 0 uid
SQL
    else # client has no teas at all so we send everything
	echo server-begin-sql
	sqlite3 -readonly "$DB" <<SQL
.mode insert teas
select *
from teas;
SQL

    fi


    if [ ! -z "$log_ids" ]; then
	echo server-begin-sql
	sqlite3 -readonly "$DB" <<SQL
.mode insert log
select *
from log
where uid in (
    select uid
    from log
    except values $log_ids
);
SQL
	echo server-want-log
	sqlite3 -readonly -quote "$DB" <<SQL
	    select uid from (
		select 0 as uid
		union values $log_ids
	    )
	    except select uid
	    from log
	    limit -1
	    offset 1 -- to drop the 0 uid
SQL
    else # client doesnt have any logs yet so we send everything we got
	echo server-begin-sql
	sqlite3 -readonly "$DB" <<SQL
.mode insert log
select *
from log;
SQL
    fi

    if [ ! -z "$done_ids" ]; then
	echo server-begin-sql
	sqlite3 -readonly "$DB" <<SQL
.mode insert done
select *
from done
where done_uid in (
    select done_uid
    from done
    except values $done_ids
);
SQL
	echo server-want-done
	sqlite3 -readonly -quote "$DB" <<SQL
	    select done_uid from (
		select 0 as done_uid
		union values $done_ids
	    )
	    except select done_uid
	    from done
	    limit -1
	    offset 1 -- to drop the 0 uid
SQL
    else # client doesnt have any done teas yet so we send everything we got
	echo server-begin-sql
	sqlite3 -readonly "$DB" <<SQL
.mode insert done
select *
from done;
SQL
    fi
    echo "done"
}

function _server_sync_accept_missing {
    local state=""
    local sql=""

    while read -r line; do
	case "$line" in
	    client-begin-sql)
		state="client-begin-sql"
	    ;;
	    done)
		break
	    ;;
	    *)
		case "$state" in
		    client-begin-sql)
			sql="$sql;$line"
		    ;;
		esac
	    ;;
	esac
    done

    if [ ! -z "$sql" ]; then
	sql="BEGIN TRANSACTION; $sql; END TRANSACTION;"
	sqlite3 "$DB" "$sql"
    fi
}

function sync {
    $0 _client_sync_send_ids \
    | ssh "$1" 'exec $SHELL -l -c "tea _server_sync_send_missing"' \
    | $0 _client_sync_send_missing \
    | ssh "$1" 'exec $SHELL -l -c "tea _server_sync_accept_missing"'
}

function print_help {
    echo "tea [new|list|edit|finish|lg|info|overview|sync|help]"
    echo Use without any argument to drink a tea
}

function main {
    sqlite3 "$DB" << SQL
create table if not exists teas (
    name,
    amount,
    url,
    type,
    year,
    uid,
    date
);

create table if not exists log (
    tea,
    amount,
    date,
    notes,
    uid
);

create table if not exists done (
    tea_uid,
    done_uid,
    date
);
SQL


    case "$1" in
        new)
            new_tea
        ;;
        list)
            list_teas all
        ;;
        edit)
            edit_notes "$2"
        ;;
	finish)
	    finish_tea
	;;
        lg)
            quick_log
        ;;
        info)
            info_tea
        ;;
        overview)
            info_global
        ;;

	sync)
	    sync "$2"
	;;

	_client_sync_send_ids)
	    _client_sync_send_ids
	;;

	_server_sync_send_missing)
	    _server_sync_send_missing
	;;

	_client_sync_send_missing)
	    _client_sync_send_missing
	;;

	_server_sync_accept_missing)
	    _server_sync_accept_missing
	;;

        "")
            drink_tea_fzy
        ;;
	*)
	    print_help
	;;
    esac
}

main $@
