#!/usr/bin/env bash

: "${FZ:=fzy}"
: "${DB:="${XDG_DATA_HOME:-$HOME/.local/share}/tea.db"}"

function die {
    echo "$@"
    exit 1
}

function escape_sqlite {
    sed "s/'/''/g" <<< "$1"
}

function escape_or_null {
    if [ -n "$1" ]; then
        echo "'$(escape_sqlite "$1")'"
    else
        echo NULL
    fi
}

function _try_create_tempfile {
    if tmpfile=$(mktemp -q /tmp/teanotes.XXXXX); then
        echo "$tmpfile"
    else
        exit 1
    fi
}

function new_tea {
    read -r -p "Name: " name
    read -r -p "Amount: " amount
    read -r -p "URL: " url
    read -r -p "Type: " typ
    read -r -e -i "$(date +%Y)" -p "Year: " year

    [ -z "$name" ] && die "Please supply a name"
    name="'$(escape_sqlite "$name")'"

    amount="$(escape_or_null "$amount")"
    url="$(escape_or_null "$url")"
    typ="$(escape_or_null "$typ")"
    year="$(escape_or_null "$year")"
    uid="$(uuidgen)"

    sqlite3 "$DB" << SQL
insert into teas (name, year, amount, type, url, uid)
values ($name, $year, $amount, $typ, $url, '$uid');
SQL
    
}

function _drink_tea {
    tea=$1
    uid="$(uuidgen)"
    read -r -p "Amount: " amount

    echo "New entry: $uid"

    sqlite3 "$DB" << SQL
insert into log (tea, amount, date, notes, uid)
values ('$(escape_sqlite "$tea")', $(escape_or_null "$amount"), date('now'), NULL, '$uid');
SQL
    
    [ -z "$EDITOR" ] && die "NO \$EDITOR set."
    tmpfile=$(_try_create_tempfile) || die "$0: Couldn't create tempfile"
    
    $EDITOR "$tmpfile"
    notes="$(cat "$tmpfile")"
    sqlite3 "$DB" << SQL
update log
set notes = '$(escape_sqlite "$notes")'
where uid = '$uid';
SQL

}

function drink_tea_fzy {
    tea="$(list_teas)"
    [ -z "$tea" ] && exit 0
    _drink_tea "$tea"
}

function list_teas {
    sqlite3 "$DB" "select name from teas" | $FZ
}

function edit_notes {
    uid="$1"
    [ -z "$EDITOR" ] && die "NO \$EDITOR set."
    if [ -z "$uid" ]; then
        echo "No uid given; using latest entry"
        uid="$(sqlite3 "$DB" 'select uid from log order by date desc limit 1')"
    else
        uid="$(sqlite3 "$DB" "select uid from log where uid like '$(escape_sqlite "$uid")%'")"
        [ -z "$uid" ] && die "Couldn't find a log entry with that uid."
    fi
    
    tmpfile=$(_try_create_tempfile) || die "$0: Couldn't create tempfile"
    
    sqlite3 "$DB" "select notes from log where uid = '$(escape_sqlite "$uid")'" > $tmpfile
    $EDITOR "$tmpfile"
    notes="$(cat "$tmpfile")"
    sqlite3 "$DB" << SQL
update log
set notes = '$(escape_sqlite "$notes")'
where uid = '$uid';
SQL

}

function quick_log {
    sqlite3 "$DB" "select tea, amount, date, uid from log order by date desc limit 10"
}

function info_tea {
	tea="$(list_teas)"
	tea="$(escape_sqlite "$tea")"
	[ -z "$tea" ] && exit 0
	total="$(sqlite3 "$DB" "select sum(amount) from teas where name = '$tea'")"
	drank="$(sqlite3 "$DB" "select sum(amount) from log where tea = '$tea'")"

    if [ -z "$drank" ]; then
        echo "Of ${total}g bought you drank nothing."
    else
        left="$(echo - | awk "{print $total - $drank}")"
        echo "Of ${total}g bought you drank ${drank}g. ${left}g left."

        avg_session_amnt="$(sqlite3 "$DB" "select round(avg(amount), 2) from log where tea = '$tea'")"
        echo "You use an average of ${avg_session_amnt}g per session."
        echo "Last few sessions:"
        sqlite3 "$DB" "select uid, date, amount from log where tea = '$tea' order by date desc limit 10" \
            | tac \
            | while IFS='|' read -r uid date amount; do
                echo "$amount on $date - $uid"
            done
    fi
}

function info_global {
    r=$(sqlite3 "$DB" << SQL 
select
    type_bought.type
  , round(type_bought.amnt, 2)
  , round(type_drank.amnt, 2)
  , round(type_bought.amnt - type_drank.amnt, 2)
from
(
    select
          type
        , sum(amount) as amnt
    from teas
    group by type
) as type_bought
join
(
    select
        sum(amount) as amnt
      , type from
        -- since the log joins onto tea name and not tea uid
        -- we have to distinct/indirect this query to not double count
        -- log entries where the tea was bought twice or more
    (
        select distinct
            name
          , log.amount
          , type
          , log.uid
          from teas
          join log on teas.name = log.tea
    ) group by type
) as type_drank
on type_bought.type = type_drank.type
order by 2 desc;
SQL
)

    while IFS='|' read -r ty amount_bought amount_drunk amount_left; do
        echo "Of ${amount_bought}g of $ty tea you drank ${amount_drunk}g. ${amount_left}g left."
    done <<< "$r"
}

function main {
    [ -f "$DB" ] || sqlite3 "$DB" << SQL
create table teas (
    name,
    amount,
    url,
    type,
    year,
    uid
);

create table log (
    tea,
    amount,
    date,
    notes,
    uid
);
SQL


    case "$1" in
        new)
            new_tea
        ;;
        list)
            list_teas
        ;;
        edit)
            edit_notes "$2"
        ;;
        lg)
            quick_log
        ;;
        info)
            info_tea
        ;;
        overview)
            info_global
        ;;
        *)
            drink_tea_fzy
        ;;
    esac
}

main $@
